from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import Order, User
from aiogram import Bot
import asyncio
import logging
from django.utils import timezone
from django.conf import settings  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º settings

logger = logging.getLogger(__name__)


# –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
def get_bot():
    if not hasattr(get_bot, "bot"):
        get_bot.bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
    return get_bot.bot


async def send_notification(bot, telegram_id, message, images):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    try:
        await bot.send_message(telegram_id, message, parse_mode="HTML")
        for image_url in images:
            if image_url:
                try:
                    await bot.send_photo(telegram_id, image_url)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


@receiver(post_save, sender=Order)
def notify_user_and_admins(sender, instance, **kwargs):
    if kwargs.get('created') or instance.tracker.has_changed('status'):
        bot = get_bot()
        header = "üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n" if kwargs.get('created') else "üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞</b>\n"
        order_items = instance.items.all()

        if not order_items:
            logger.warning(f"–ó–∞–∫–∞–∑ #{instance.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            return

        items_list = "\n".join([f"{item.product.name} x {item.quantity}" for item in order_items])

        total_price = instance.get_total_price()
        if total_price is None or total_price == 0:
            logger.warning(f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ #{instance.id} —Ä–∞–≤–Ω–∞ 0 –∏–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.")
            return

        item_images = [
            f"{settings.BASE_URL}{item.product.image.url}" if item.product.image else None
            for item in order_items
        ]

        message = (
            f"{header}"
            f"üõí <b>–ó–∞–∫–∞–∑ #{instance.id}</b>\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {instance.get_status_display()}\n"
            f"üìÖ <b>–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:</b> {timezone.localtime(instance.created_at).strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"üí∞ <b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> {total_price:.2f} —Ä—É–±.\n"
            f"üè† <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {instance.address if instance.address else '–°–∞–º–æ–≤—ã–≤–æ–∑'}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {timezone.localtime(instance.delivery_time).strftime('%Y-%m-%d %H:%M') if instance.delivery_time else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>\n{items_list}"
        )

        if instance.tracker.has_changed('status'):
            old_status = instance.tracker.previous('status')
            new_status = instance.status
            message += f"üìÖ <b>–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —Å:</b> {dict(Order.STATUS_CHOICES).get(old_status, old_status)} –Ω–∞ {dict(Order.STATUS_CHOICES).get(new_status, new_status)}\n"

        recipients = []
        if instance.user.telegram_id:
            recipients.append(instance.user.telegram_id)

        admins = User.objects.filter(is_staff=True)
        for admin in admins:
            if admin.telegram_id:
                recipients.append(admin.telegram_id)

        async def send_notifications():
            tasks = [send_notification(bot, recipient, message, item_images) for recipient in recipients]
            await asyncio.gather(*tasks)

        try:
            asyncio.run(send_notifications())
        except RuntimeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞: {e}")